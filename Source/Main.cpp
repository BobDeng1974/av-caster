/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "AvCaster.h"
#include "./Trace/TraceMain.h"


//==============================================================================
class AvCasterApplication : public JUCEApplication , public MultiTimer
{
public:

  AvCasterApplication() {}

  void initialise(const String& command_line) override
  {
    this->mainWindow          = new MainWindow(this) ;
    MainContent* main_content = (MainContent*)this->mainWindow->mainContent ;

    if (AvCaster::Initialize(main_content , command_line))
//     if (AvCaster::Initialize(this , main_content , command_line))
    {
      // start GUI update timers
      startTimer(APP::GUI_TIMER_HI_ID  , APP::GUI_UPDATE_HI_IVL) ;
      startTimer(APP::GUI_TIMER_MED_ID , APP::GUI_UPDATE_MED_IVL) ;
      startTimer(APP::GUI_TIMER_LO_ID  , APP::GUI_UPDATE_LO_IVL) ;
    }
    else quit() ;
  }

  void anotherInstanceStarted (const String& commandLine) override
  {
    // When another instance of the app is launched while this one is running,
    // this method is invoked, and the commandLine parameter tells you what
    // the other instance's command-line arguments were.
  }

  void shutdown() override
  {
DEBUG_TRACE_SHUTDOWN_IN

    AvCaster::Shutdown() ;

    this->mainWindow = nullptr ;

DEBUG_TRACE_SHUTDOWN_OUT
  }

  void         systemRequestedQuit()        override { this->quit() ; }
  const String getApplicationName()         override { return ProjectInfo::projectName ; }
  const String getApplicationVersion()      override { return ProjectInfo::versionString ; }
  bool         moreThanOneInstanceAllowed() override { return false ; }


  //==============================================================================
  /*
      This class implements the desktop window that contains an instance of
      our MainContent class.
  */
  class MainWindow : public DocumentWindow
  {
    friend class AvCasterApplication ;


  public:

    MainWindow(AvCasterApplication* app) : DocumentWindow(APP::APP_NAME             ,
                                                          Colour(0xff202020)        ,
                                                          DocumentWindow::allButtons)
    {
      this->app = app ;

      // main content
      this->mainContent = new MainContent(this) ;
      this->mainContent->setComponentID(GUI::CONTENT_GUI_ID) ;
      setContentOwned(this->mainContent , true) ;

      // this main desktop window
#ifdef _MAC
      setTitleBarButtonsRequired(DocumentWindow::allButtons , true) ;
#endif // _MAC
      setTitleBarHeight(GUI::TITLEBAR_H) ;
//      setIcon(const Image &imageToUse) ;
      centreWithSize(getWidth() , getHeight()) ;
      setVisible(true) ;
    }

    ~MainWindow() { this->mainContent = nullptr ; }

    void closeButtonPressed() override { this->app->systemRequestedQuit() ; }


  private:

    AvCasterApplication* app ;
    ScopedPointer<MainContent> mainContent ;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MainWindow)
  } ;


private:

  void timerCallback(int timer_id) override { AvCaster::HandleTimer(timer_id) ; }

  ScopedPointer<MainWindow> mainWindow ;
} ;

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION(AvCasterApplication)
